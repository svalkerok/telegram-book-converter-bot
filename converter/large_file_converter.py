"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.
"""
import asyncio
import subprocess
import logging
from pathlib import Path
from typing import Optional, Callable, Dict, Any
import time
import os
import tempfile

logger = logging.getLogger(__name__)


class LargeFileConverter:
    """–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤."""
    
    def __init__(self, progress_callback: Optional[Callable] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤.
        
        Args:
            progress_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        """
        self.progress_callback = progress_callback
        
    async def optimize_pdf_before_conversion(self, input_path: Path) -> Path:
        """
        –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è PDF –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.
        
        Args:
            input_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É PDF
            
        Returns:
            –ü—É—Ç—å –∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É PDF
        """
        if self.progress_callback:
            await self.progress_callback("üìä –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è PDF —Ñ–∞–π–ª–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        temp_dir = Path(tempfile.gettempdir())
        optimized_path = temp_dir / f"optimized_{input_path.name}"
        
        try:
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ PDF (—É–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, —Å–∂–∞—Ç–∏–µ)
            optimize_cmd = [
                'gs',  # Ghostscript
                '-sDEVICE=pdfwrite',
                '-dCompatibilityLevel=1.4',
                '-dPDFSETTINGS=/ebook',  # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –∫–Ω–∏–≥
                '-dNOPAUSE',
                '-dQUIET',
                '-dBATCH',
                '-dDetectDuplicateImages=true',
                '-dCompressFonts=true',
                '-r150',  # –ü–æ–Ω–∏–∂–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–æ 150 DPI
                f'-sOutputFile={optimized_path}',
                str(input_path)
            ]
            
            process = await asyncio.create_subprocess_exec(
                *optimize_cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await asyncio.wait_for(process.communicate(), timeout=300)
            
            if process.returncode == 0 and optimized_path.exists():
                original_size = input_path.stat().st_size / (1024 * 1024)
                optimized_size = optimized_path.stat().st_size / (1024 * 1024)
                
                logger.info(f"PDF –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω: {original_size:.1f}MB ‚Üí {optimized_size:.1f}MB")
                
                if self.progress_callback:
                    await self.progress_callback(
                        f"‚úÖ PDF –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω: {original_size:.1f}MB ‚Üí {optimized_size:.1f}MB"
                    )
                
                return optimized_path
            else:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å PDF, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª")
                if optimized_path.exists():
                    optimized_path.unlink()
                return input_path
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ PDF: {e}")
            if optimized_path.exists():
                optimized_path.unlink()
            return input_path
    
    def get_optimized_conversion_params(self, target_format: str, file_size_mb: float) -> list:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤.
        
        Args:
            target_format: –¶–µ–ª–µ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
            file_size_mb: –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –ú–ë
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è ebook-convert
        """
        base_params = []
        
        # –û–±—â–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        if file_size_mb > 10:  # –î–ª—è —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ 10 –ú–ë
            base_params.extend([
                '--max-levels=5',  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                '--chapter-mark=none',  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≥–ª–∞–≤—ã
                '--page-breaks-before=/',  # –ú–∏–Ω–∏–º—É–º —Ä–∞–∑—Ä—ã–≤–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü
                '--remove-paragraph-spacing',  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã
                '--linearize-tables',  # –£–ø—Ä–æ—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            ])
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        if target_format.lower() == 'epub':
            params = base_params + [
                '--epub-version=2',
                '--epub-flatten',
                '--no-default-epub-cover',
                '--disable-font-rescaling',
                '--embed-font-family=""',  # –ù–µ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç—ã
                '--subset-embedded-fonts',
                '--smarten-punctuation',
            ]
            
            # –î–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            if file_size_mb > 50:
                params.extend([
                    '--max-toc-links=50',  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ
                    '--duplicate-links-in-toc',
                    '--toc-threshold=6',
                ])
                
        elif target_format.lower() == 'mobi':
            params = base_params + [
                '--mobi-file-type=both',
                '--mobi-ignore-margins',
                '--mobi-keep-original-images=false',  # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            ]
            
        elif target_format.lower() == 'txt':
            params = base_params + [
                '--formatting-type=plain',
                '--preserve-cover-aspect-ratio=false',
                '--txt-output-encoding=utf-8',
            ]
        else:
            params = base_params
            
        return params
    
    async def convert_with_progress(self, 
                                  input_path: Path, 
                                  target_format: str,
                                  timeout: int = 1800) -> Optional[Path]:  # 30 –º–∏–Ω—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π.
        
        Args:
            input_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            target_format: –¶–µ–ª–µ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
            timeout: –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            –ü—É—Ç—å –∫ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None
        """
        start_time = time.time()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size_mb = input_path.stat().st_size / (1024 * 1024)
            
            if self.progress_callback:
                await self.progress_callback(f"üìÅ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ ({file_size_mb:.1f} –ú–ë)...")
            
            # –î–ª—è PDF —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ 20 –ú–ë –¥–µ–ª–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
            working_file = input_path
            if input_path.suffix.lower() == '.pdf' and file_size_mb > 20:
                working_file = await self.optimize_pdf_before_conversion(input_path)
                file_size_mb = working_file.stat().st_size / (1024 * 1024)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            output_filename = self._generate_output_filename(working_file, target_format)
            output_path = working_file.parent / output_filename
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            format_params = self.get_optimized_conversion_params(target_format, file_size_mb)
            
            if self.progress_callback:
                estimated_time = self._estimate_conversion_time(file_size_mb, target_format)
                await self.progress_callback(
                    f"‚öôÔ∏è –ù–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ {target_format.upper()}\n"
                    f"‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~{estimated_time} –º–∏–Ω—É—Ç"
                )
            
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            cmd = [
                'ebook-convert',
                str(working_file),
                str(output_path),
                '--verbose'  # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            ] + format_params
            
            logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞: {' '.join(cmd[:3])} + {len(format_params)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.STDOUT
            )
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            await self._monitor_conversion_progress(process, timeout)
            
            if process.returncode == 0 and output_path.exists():
                duration = time.time() - start_time
                output_size_mb = output_path.stat().st_size / (1024 * 1024)
                
                logger.info(f"–ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∑–∞ {duration/60:.1f} –º–∏–Ω—É—Ç")
                
                if self.progress_callback:
                    await self.progress_callback(
                        f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                        f"‚è±Ô∏è –í—Ä–µ–º—è: {duration/60:.1f} –º–∏–Ω—É—Ç\n"
                        f"üìä –†–∞–∑–º–µ—Ä: {output_size_mb:.1f} –ú–ë"
                    )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                if working_file != input_path:
                    working_file.unlink()
                
                return output_path
            else:
                logger.error(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å (–∫–æ–¥: {process.returncode})")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            return None
    
    async def _monitor_conversion_progress(self, process, timeout):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏."""
        start_time = time.time()
        last_update = start_time
        
        try:
            while True:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
                    line = await asyncio.wait_for(
                        process.stdout.readline(), 
                        timeout=30
                    )
                    
                    if not line:
                        break
                    
                    current_time = time.time()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
                    if self.progress_callback and (current_time - last_update) > 120:
                        elapsed_minutes = (current_time - start_time) / 60
                        await self.progress_callback(
                            f"‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...\n"
                            f"‚è±Ô∏è –ü—Ä–æ—à–ª–æ: {elapsed_minutes:.1f} –º–∏–Ω—É—Ç"
                        )
                        last_update = current_time
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
                    if (current_time - start_time) > timeout:
                        process.kill()
                        raise asyncio.TimeoutError("–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
                        
                except asyncio.TimeoutError:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–≤–æ–¥–∞ 30 —Å–µ–∫—É–Ω–¥, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
                    current_time = time.time()
                    if (current_time - start_time) > timeout:
                        process.kill()
                        raise asyncio.TimeoutError("–ü—Ä–µ–≤—ã—à–µ–Ω –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç")
                    continue
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            await process.wait()
            
        except asyncio.TimeoutError:
            process.kill()
            await process.wait()
            raise
    
    def _estimate_conversion_time(self, file_size_mb: float, target_format: str) -> int:
        """–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö."""
        base_time = file_size_mb * 0.1  # 0.1 –º–∏–Ω—É—Ç—ã –Ω–∞ –ú–ë –±–∞–∑–æ–≤–æ
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        format_multipliers = {
            'txt': 0.5,
            'epub': 1.0,
            'mobi': 1.2,
            'pdf': 1.5,
            'docx': 0.8
        }
        
        multiplier = format_multipliers.get(target_format.lower(), 1.0)
        estimated = int(base_time * multiplier)
        
        return max(1, min(estimated, 30))  # –û—Ç 1 –¥–æ 30 –º–∏–Ω—É—Ç
    
    def _generate_output_filename(self, input_path: Path, target_format: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
        base_name = input_path.stem
        safe_name = "".join(c for c in base_name if c.isalnum() or c in (' ', '-', '_')).strip()
        
        if len(safe_name) > 50:
            safe_name = safe_name[:50].strip()
        
        if not safe_name:
            safe_name = "Large_Converted_Book"
        
        return f"{safe_name}_–ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ.{target_format.lower()}"
