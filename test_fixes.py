#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞.
"""
import asyncio
import tempfile
from pathlib import Path
from converter.converter import BookConverter

async def test_epub_conversion():
    """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ EPUB —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."""
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π HTML —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_html = """<!DOCTYPE html>
<html>
<head>
    <title>–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–∏–≥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Kindle</title>
    <meta charset="utf-8">
</head>
<body>
    <h1>–ì–ª–∞–≤–∞ 1: –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Kindle</h1>
    <p>–≠—Ç–∞ –∫–Ω–∏–≥–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Amazon Kindle.</p>
    <p>–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ E999.</p>
    
    <h2>–ß—Ç–æ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:</h2>
    <ul>
        <li>–î–æ–±–∞–≤–ª–µ–Ω EPUB –≤–µ—Ä—Å–∏–∏ 2.0 –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏</li>
        <li>–í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ</li>
        <li>–ü–ª–æ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤</li>
        <li>–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</li>
        <li>–£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤</li>
    </ul>
    
    <h1>–ì–ª–∞–≤–∞ 2: –ù–æ–≤–∞—è —Å—Ö–µ–º–∞ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è</h1>
    <p>–§–∞–π–ª—ã —Ç–µ–ø–µ—Ä—å –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ–ò–º—è_–ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ.—Ñ–æ—Ä–º–∞—Ç</p>
    <p>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —É–¥–∞–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.</p>
</body>
</html>"""
    
    converter = BookConverter()
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π HTML —Ñ–∞–π–ª —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º –∏–º–µ–Ω–µ–º
    with tempfile.NamedTemporaryFile(mode='w', suffix='.html', delete=False, encoding='utf-8') as f:
        f.write(test_html)
        input_path = Path(f.name)
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª —á—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—á–∏—Å—Ç–∫—É –∏–º–µ–Ω–∏
    problem_name = input_path.parent / "–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–∏–≥–∞ <—Å> –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏:—Å–∏–º–≤–æ–ª–∞–º–∏|?.html"
    input_path.rename(problem_name)
    input_path = problem_name
    
    try:
        print(f"üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")
        print(f"üìÇ –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_path.name}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ EPUB
        output_path = await converter.convert(input_path, 'epub')
        
        if output_path and output_path.exists():
            print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìÑ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_path.name}")
            print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {output_path.stat().st_size / 1024:.1f} –ö–ë")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ EPUB –Ω–∞ –±–∞–∑–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É EPUB...")
            
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            input_path.unlink()
            output_path.unlink()
            
            return True
        else:
            print(f"‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å!")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False
    finally:
        # –û—á–∏—â–∞–µ–º, –µ—Å–ª–∏ —Ñ–∞–π–ª—ã –æ—Å—Ç–∞–ª–∏—Å—å
        try:
            if input_path.exists():
                input_path.unlink()
        except:
            pass

async def test_filename_generation():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤."""
    
    converter = BookConverter()
    
    test_cases = [
        ("normal_file.pdf", "epub", "normal_file_–ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ.epub"),
        ("—Ñ–∞–π–ª —Å —Ä—É—Å—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏.txt", "mobi", "—Ñ–∞–π–ª_—Å_—Ä—É—Å—Å–∫–∏–º–∏_–±—É–∫–≤–∞–º–∏_–ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ.mobi"),
        ("file<with>bad:chars?.fb2", "pdf", "filewithbadchars_–ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ.pdf"),
        ("very_long_filename_that_should_be_truncated_because_its_too_long.html", "epub", 
         "very_long_filename_that_should_be_truncated_beca_–ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ.epub"),
    ]
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤...")
    
    for original, format_type, expected_pattern in test_cases:
        input_path = Path(f"/tmp/{original}")
        output_path = converter.generate_output_filename(input_path, format_type)
        
        print(f"üìù {original} -> {output_path.name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∏–º–µ–Ω–∏ –µ—Å—Ç—å "_–ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ"
        assert "_–ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ" in output_path.name, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å –≤ {output_path.name}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ
        assert output_path.suffix == f".{format_type}", f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ {output_path.name}"
    
    print(f"‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞...")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    asyncio.run(test_filename_generation())
    print()
    
    # –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ EPUB
    success = asyncio.run(test_epub_conversion())
    
    print("=" * 50)
    if success:
        print("‚ú® –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç.")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.")
