#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π Unicode
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def test_launcher():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º launcher.py"""
    print("[TEST] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ launcher.py...")
    
    try:
        import launcher
        print("[OK] launcher.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é setup_environment
        app_dir = launcher.setup_environment()
        print(f"[OK] setup_environment —Ä–∞–±–æ—Ç–∞–µ—Ç: {app_dir}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º check_dependencies
        missing_deps = launcher.check_dependencies()
        if not missing_deps:
            print("[OK] –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            print(f"[INFO] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {missing_deps}")
            
        return True
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ launcher.py: {e}")
        return False

def test_bot_gui():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º bot_gui.py"""
    print("[TEST] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ bot_gui.py...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç
        import bot_gui
        print("[OK] bot_gui.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é safe_print
        if hasattr(bot_gui, 'safe_print'):
            print("[OK] –§—É–Ω–∫—Ü–∏—è safe_print –Ω–∞–π–¥–µ–Ω–∞")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º safe_print —Å —ç–º–æ–¥–∑–∏
            test_message = "üöÄ –¢–µ—Å—Ç —Å —ç–º–æ–¥–∑–∏ ‚úÖ"
            bot_gui.safe_print(test_message)
            print("[OK] safe_print —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —ç–º–æ–¥–∑–∏")
        else:
            print("[WARNING] –§—É–Ω–∫—Ü–∏—è safe_print –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ bot_gui.py: {e}")
        return False

def test_unicode_handling():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É Unicode"""
    print("[TEST] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Unicode...")
    
    try:
        # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–º–æ–¥–∑–∏
        test_emojis = ['üöÄ', '‚úÖ', '‚ùå', 'üì¶', 'üé®', 'üéØ', 'üìÅ', 'ü§ñ', '‚ö†Ô∏è']
        
        for emoji in test_emojis:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–≤–µ—Å—Ç–∏ —ç–º–æ–¥–∑–∏
                message = f"–¢–µ—Å—Ç —ç–º–æ–¥–∑–∏: {emoji}"
                print(message.encode('ascii', errors='replace').decode('ascii'))
            except Exception as e:
                print(f"[ERROR] –ü—Ä–æ–±–ª–µ–º–∞ —Å —ç–º–æ–¥–∑–∏ {emoji}: {e}")
                
        print("[OK] –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ Unicode –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ Unicode: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 50)
    print("–¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú–´ –° –ö–û–î–ò–†–û–í–ö–û–ô")
    print("=" * 50)
    
    tests_passed = 0
    total_tests = 3
    
    # –¢–µ—Å—Ç 1: launcher.py
    if test_launcher():
        tests_passed += 1
    
    print()
    
    # –¢–µ—Å—Ç 2: bot_gui.py  
    if test_bot_gui():
        tests_passed += 1
    
    print()
    
    # –¢–µ—Å—Ç 3: Unicode handling
    if test_unicode_handling():
        tests_passed += 1
    
    print()
    print("=" * 50)
    print(f"–†–ï–ó–£–õ–¨–¢–ê–¢: {tests_passed}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if tests_passed == total_tests:
        print("[SUCCESS] –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("[WARNING] –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        
    print("=" * 50)
    
    return tests_passed == total_tests

if __name__ == "__main__":
    success = main()
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    sys.exit(0 if success else 1)
