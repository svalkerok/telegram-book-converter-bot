"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤.
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from pathlib import Path
import logging

from converter.converter import BookConverter
from converter.validators import FileValidator
from utils.file_manager import TempFileManager

logger = logging.getLogger(__name__)
router = Router()

converter = BookConverter()


@router.callback_query(F.data.startswith("convert:"))
async def handle_conversion(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.
    
    Args:
        callback: Callback query
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
    target_format = callback.data.split(":")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    file_path = data.get("file_path")
    file_name = data.get("file_name")
    
    if not file_path:
        await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
        await callback.message.delete()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        f"‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é *{file_name}* –≤ *{target_format.upper()}*...\n"
        f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
        parse_mode="Markdown"
    )
    
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
        input_path = Path(file_path)
        output_path = await converter.convert(input_path, target_format)
        
        if output_path and output_path.exists():
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            document = FSInputFile(output_path, filename=output_path.name)
            
            # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            file_size_mb = output_path.stat().st_size / (1024 * 1024)
            caption = (
                f"‚úÖ *–ì–æ—Ç–æ–≤–æ!* –í–∞—à —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ *{target_format.upper()}*\n"
                f"üìÑ *–ò–º—è —Ñ–∞–π–ª–∞:* `{output_path.name}`\n"
                f"üìä *–†–∞–∑–º–µ—Ä:* {file_size_mb:.1f} –ú–ë\n\n"
                f"üî• *–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Kindle!* (–¥–ª—è EPUB)" if target_format.lower() == 'epub' else ""
            )
            
            await callback.message.answer_document(
                document=document,
                caption=caption,
                parse_mode="Markdown"
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
            await callback.message.delete()
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
            try:
                input_path.unlink()
                output_path.unlink()
            except:
                pass
        else:
            await callback.message.edit_text(
                "‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª*\n\n"
                "üîç *–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*\n"
                "‚Ä¢ –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É\n"
                "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º\n\n"
                "üí° *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:*\n"
                "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å\n"
                "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ",
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        await callback.message.edit_text(
            "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏*\n\n"
            "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ª–æ–≥\n"
            "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ\n\n"
            "üí¨ –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
            parse_mode="Markdown"
        )
    finally:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()


@router.callback_query(F.data == "cancel")
async def handle_cancel(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏.
    
    Args:
        callback: Callback query
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    await state.clear()
    await callback.message.delete()
    await callback.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
