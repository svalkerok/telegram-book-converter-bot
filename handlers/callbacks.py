"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from pathlib import Path
import logging

from converter.converter import BookConverter
from converter.validators import FileValidator
from utils.file_manager import TempFileManager
from utils.error_manager import error_manager, ErrorCode

logger = logging.getLogger(__name__)
router = Router()

converter = BookConverter()


@router.callback_query(F.data.startswith("convert:"))
async def handle_conversion(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.
    """
    target_format = callback.data.split(":")[1]
    
    data = await state.get_data()
    file_path = data.get("file_path")
    file_name = data.get("file_name")
    user_id = callback.from_user.id
    
    if not file_path:
        await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
        await callback.message.delete()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    input_path = Path(file_path)
    file_size_mb = input_path.stat().st_size / (1024 * 1024)
    
    # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if file_size_mb > 20:
        initial_message = (
            f"üöÄ *–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞*\n"
            f"üìÑ *–§–∞–π–ª:* {file_name} ({file_size_mb:.1f} –ú–ë)\n"
            f"üéØ *–§–æ—Ä–º–∞—Ç:* {target_format.upper()}\n\n"
            f"‚ö° *–ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤*\n"
            f"‚è≥ *–≠—Ç–æ –∑–∞–π–º–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –ª—É—á—à–µ*"
        )
    else:
        initial_message = (
            f"‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é *{file_name}* –≤ *{target_format.upper()}*...\n"
            f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
        )
    
    await callback.message.edit_text(initial_message, parse_mode="Markdown")
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    async def update_progress(message: str):
        try:
            current_text = (
                f"üöÄ *–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ*\n"
                f"üìÑ *–§–∞–π–ª:* {file_name}\n"
                f"üéØ *–§–æ—Ä–º–∞—Ç:* {target_format.upper()}\n\n"
                f"{message}"
            )
            await callback.message.edit_text(current_text, parse_mode="Markdown")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å: {e}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Å callback –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        output_path = await converter.convert(
            input_path, 
            target_format, 
            progress_callback=update_progress,
            user_id=user_id
        )
        
        if output_path and output_path.exists():
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            document = FSInputFile(output_path, filename=output_path.name)
            
            output_size_mb = output_path.stat().st_size / (1024 * 1024)
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            if file_size_mb > 20:
                caption = (
                    f"üéâ *–ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!*\n\n"
                    f"üìÑ *–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª:* {file_name} ({file_size_mb:.1f} –ú–ë)\n"
                    f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç:* {output_path.name} ({output_size_mb:.1f} –ú–ë)\n"
                    f"üéØ *–§–æ—Ä–º–∞—Ç:* {target_format.upper()}\n\n"
                    f"üî• *–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏!*"
                    + (f"\n‚ö° *–°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å Kindle!*" if target_format.lower() == 'epub' else "")
                )
            else:
                caption = (
                    f"‚úÖ *–ì–æ—Ç–æ–≤–æ!* –í–∞—à —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ *{target_format.upper()}*\n"
                    f"üìÑ *–ò–º—è —Ñ–∞–π–ª–∞:* `{output_path.name}`\n"
                    f"üìä *–†–∞–∑–º–µ—Ä:* {output_size_mb:.1f} –ú–ë\n\n"
                    + (f"üî• *–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Kindle!*" if target_format.lower() == 'epub' else "")
                )
            
            await callback.message.answer_document(
                document=document,
                caption=caption,
                parse_mode="Markdown"
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
            await callback.message.delete()
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
            try:
                input_path.unlink()
                output_path.unlink()
            except:
                pass
                
        else:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É –æ—à–∏–±–æ–∫
            error_id = error_manager.log_error(
                ErrorCode.CONVERSION_FAILED,
                context={
                    'target_format': target_format,
                    'file_name': file_name,
                    'file_size_mb': file_size_mb,
                    'callback_data': callback.data
                },
                user_id=user_id
            )
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            if file_size_mb > 50:
                error_message = (
                    f"‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª*\n\n"
                    f"ÔøΩ *–†–∞–∑–º–µ—Ä:* {file_size_mb:.1f} –ú–ë (–æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π)\n\n"
                    f"ÔøΩüîç *–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:*\n"
                    f"‚Ä¢ –†–∞–∑–¥–µ–ª–∏—Ç–µ —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏ (–ø–æ 20-30 –ú–ë)\n"
                    f"‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ PDF\n"
                    f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç TXT –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
                    f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–Ω–ª–∞–π–Ω-–∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä PDF\n\n"
                    f"üÜî *–ö–æ–¥ –æ—à–∏–±–∫–∏:* `{ErrorCode.CONVERSION_FAILED.value}` | *ID:* `{error_id}`\n"
                    f"üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* –§–∞–π–ª—ã –±–æ–ª—å—à–µ 50 –ú–ë –ª—É—á—à–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç—è–º–∏"
                )
            elif file_size_mb > 20:
                error_message = (
                    f"‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª*\n\n"
                    f"üìä *–†–∞–∑–º–µ—Ä:* {file_size_mb:.1f} –ú–ë\n\n"
                    f"üîç *–°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤:*\n"
                    f"‚Ä¢ –°–ª–æ–∂–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
                    f"‚Ä¢ –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ PDF\n"
                    f"‚Ä¢ –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
                    f"üí° *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:*\n"
                    f"‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å PDF –∑–∞–Ω–æ–≤–æ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞\n"
                    f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ TXT (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)\n"
                    f"‚Ä¢ –†–∞–∑–±–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤\n"
                    f"‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä —á–µ—Ä–µ–∑ PDF-–∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä\n\n"
                    f"üÜî *–ö–æ–¥ –æ—à–∏–±–∫–∏:* `{ErrorCode.CONVERSION_FAILED.value}` | *ID:* `{error_id}`"
                )
            else:
                error_message = error_manager.get_user_message(ErrorCode.CONVERSION_FAILED, error_id)
            
            await callback.message.edit_text(error_message, parse_mode="Markdown")
            
    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        error_id = error_manager.log_error(
            ErrorCode.UNKNOWN_ERROR,
            exception=e,
            context={
                'target_format': target_format,
                'file_name': file_name,
                'file_size_mb': file_size_mb,
                'callback_data': callback.data
            },
            user_id=user_id
        )
        
        error_message = error_manager.get_user_message(ErrorCode.UNKNOWN_ERROR, error_id)
        
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_conversion: {e} (Error ID: {error_id})")
        await callback.message.edit_text(
            error_message,
            parse_mode="Markdown"
        )
    finally:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()


@router.callback_query(F.data == "cancel")
async def handle_cancel(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏.
    
    Args:
        callback: Callback query
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    await state.clear()
    await callback.message.delete()
    await callback.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
