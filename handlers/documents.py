"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
"""
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from pathlib import Path
import logging
import io

from converter.converter import BookConverter
from converter.validators import FileValidator
from utils.file_manager import TempFileManager
from keyboards.inline import create_format_keyboard
from config import MAX_FILE_SIZE

logger = logging.getLogger(__name__)
router = Router()

file_manager = TempFileManager()
converter = BookConverter()
validator = FileValidator()


@router.message(F.document)
async def handle_document(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    document = message.document
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
    if document.file_size > MAX_FILE_SIZE:
        await message.reply(
            f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE // 1_048_576} –ú–ë"
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    status_msg = await message.reply("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await message.bot.get_file(document.file_id)
        file_data = await message.bot.download_file(file.file_path)
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ BytesIO
        if isinstance(file_data, io.BytesIO):
            file_bytes = file_data.getvalue()
        else:
            file_bytes = file_data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_path = await file_manager.save_file_from_bytes(
            file_bytes, 
            document.file_name
        )
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º
        is_valid, error = validator.validate_file(temp_path)
        if not is_valid:
            await status_msg.edit_text(f"‚ùå {error}")
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                temp_path.unlink()
            except:
                pass
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        current_format = temp_path.suffix.lstrip('.')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            file_path=str(temp_path),
            file_name=document.file_name,
            current_format=current_format
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
        await status_msg.edit_text(
            f"üìÑ –§–∞–π–ª: *{document.file_name}*\n"
            f"üìä –§–æ—Ä–º–∞—Ç: *{current_format.upper()}*\n"
            f"üì¶ –†–∞–∑–º–µ—Ä: *{document.file_size // 1024} –ö–ë*\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:",
            parse_mode="Markdown",
            reply_markup=create_format_keyboard(current_format)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await status_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
