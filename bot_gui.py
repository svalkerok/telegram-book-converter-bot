#!/usr/bin/env python3
"""
ü§ñ Telegram Book Converter Bot - GUI Manager
–ö—Ä–∞—Å–∏–≤—ã–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
"""

import customtkinter as ctk
import tkinter as tk
from tkinter import messagebox, filedialog
import threading
import subprocess
import os
import sys
import json
import time
from pathlib import Path
import asyncio
from dotenv import load_dotenv, set_key

try:
    import requests
except ImportError:
    print("‚ùå –ú–æ–¥—É–ª—å requests –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install requests")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CustomTkinter
ctk.set_appearance_mode("dark")  # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
ctk.set_default_color_theme("blue")  # –°–∏–Ω—è—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞

class BotManagerGUI:
    def __init__(self):
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.root = ctk.CTk()
        self.root.title("ü§ñ Telegram Book Converter Bot Manager")
        self.root.geometry("800x600")
        self.root.resizable(True, True)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.bot_process = None
        self.is_bot_running = False
        self.config_file = Path(".env")
        self._closing = False  # –§–ª–∞–≥ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()
        self.load_config()
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        if self._closing:
            return  # –£–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–∫—Ä—ã—Ç–∏—è
            
        self._closing = True
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω
            if self.is_bot_running and self.bot_process:
                self.log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º...")
                self.stop_bot()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
            self.root.quit()
            self.root.destroy()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º
            try:
                self.root.destroy()
            except:
                pass
        
    def create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = ctk.CTkLabel(
            self.root, 
            text="ü§ñ Telegram Book Converter Bot",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        self.title_label.pack(pady=20)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        self.main_frame = ctk.CTkFrame(self.root)
        self.main_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # === –°–ï–ö–¶–ò–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===
        self.config_frame = ctk.CTkFrame(self.main_frame)
        self.config_frame.pack(fill="x", padx=20, pady=10)
        
        self.config_label = ctk.CTkLabel(
            self.config_frame, 
            text="‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        self.config_label.pack(pady=10)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞
        self.token_label = ctk.CTkLabel(self.config_frame, text="üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞:")
        self.token_label.pack(anchor="w", padx=20)
        
        self.token_entry = ctk.CTkEntry(
            self.config_frame,
            placeholder_text="–í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather",
            width=400,
            show="*"  # –°–∫—Ä—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω
        )
        self.token_entry.pack(pady=5, padx=20, fill="x")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–º
        self.token_buttons_frame = ctk.CTkFrame(self.config_frame)
        self.token_buttons_frame.pack(fill="x", padx=20, pady=5)
        
        self.save_token_btn = ctk.CTkButton(
            self.token_buttons_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω",
            command=self.save_token,
            width=150
        )
        self.save_token_btn.pack(side="left", padx=5)
        
        self.show_token_btn = ctk.CTkButton(
            self.token_buttons_frame,
            text="üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å/–°–∫—Ä—ã—Ç—å",
            command=self.toggle_token_visibility,
            width=150
        )
        self.show_token_btn.pack(side="left", padx=5)
        
        self.test_token_btn = ctk.CTkButton(
            self.token_buttons_frame,
            text="üß™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω",
            command=self.test_token,
            width=150
        )
        self.test_token_btn.pack(side="left", padx=5)
        
        # === –°–ï–ö–¶–ò–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–û–¢–û–ú ===
        self.control_frame = ctk.CTkFrame(self.main_frame)
        self.control_frame.pack(fill="x", padx=20, pady=10)
        
        self.control_label = ctk.CTkLabel(
            self.control_frame, 
            text="üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        self.control_label.pack(pady=10)
        
        # –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        self.status_frame = ctk.CTkFrame(self.control_frame)
        self.status_frame.pack(fill="x", padx=20, pady=5)
        
        self.status_label = ctk.CTkLabel(
            self.status_frame,
            text="üìä –°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
            font=ctk.CTkFont(size=14)
        )
        self.status_label.pack(side="left", padx=10, pady=10)
        
        self.status_indicator = ctk.CTkLabel(
            self.status_frame,
            text="üî¥",
            font=ctk.CTkFont(size=20)
        )
        self.status_indicator.pack(side="right", padx=10, pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.control_buttons_frame = ctk.CTkFrame(self.control_frame)
        self.control_buttons_frame.pack(fill="x", padx=20, pady=10)
        
        self.start_btn = ctk.CTkButton(
            self.control_buttons_frame,
            text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞",
            command=self.start_bot,
            width=200,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold")
        )
        self.start_btn.pack(side="left", padx=10, pady=5)
        
        self.stop_btn = ctk.CTkButton(
            self.control_buttons_frame,
            text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞",
            command=self.stop_bot,
            width=200,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            state="disabled"
        )
        self.stop_btn.pack(side="left", padx=10, pady=5)
        
        self.restart_btn = ctk.CTkButton(
            self.control_buttons_frame,
            text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å",
            command=self.restart_bot,
            width=200,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            state="disabled"
        )
        self.restart_btn.pack(side="left", padx=10, pady=5)
        
        # === –°–ï–ö–¶–ò–Ø –õ–û–ì–û–í ===
        self.logs_frame = ctk.CTkFrame(self.main_frame)
        self.logs_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        self.logs_label = ctk.CTkLabel(
            self.logs_frame, 
            text="üìã –õ–æ–≥–∏ –±–æ—Ç–∞",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        self.logs_label.pack(pady=10)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤
        self.logs_textbox = ctk.CTkTextbox(
            self.logs_frame,
            width=600,
            height=200,
            font=ctk.CTkFont(family="Consolas", size=12)
        )
        self.logs_textbox.pack(fill="both", expand=True, padx=20, pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏
        self.logs_buttons_frame = ctk.CTkFrame(self.logs_frame)
        self.logs_buttons_frame.pack(fill="x", padx=20, pady=5)
        
        self.clear_logs_btn = ctk.CTkButton(
            self.logs_buttons_frame,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏",
            command=self.clear_logs,
            width=150
        )
        self.clear_logs_btn.pack(side="left", padx=5)
        
        self.save_logs_btn = ctk.CTkButton(
            self.logs_buttons_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏",
            command=self.save_logs,
            width=150
        )
        self.save_logs_btn.pack(side="left", padx=5)
        
        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –ª–æ–≥–æ–≤
        self.auto_scroll_var = ctk.BooleanVar(value=True)
        self.auto_scroll_cb = ctk.CTkCheckBox(
            self.logs_buttons_frame,
            text="üìú –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞",
            variable=self.auto_scroll_var
        )
        self.auto_scroll_cb.pack(side="right", padx=5)
        
        # === –ù–ò–ñ–ù–Ø–Ø –ü–ê–ù–ï–õ–¨ ===
        self.bottom_frame = ctk.CTkFrame(self.root)
        self.bottom_frame.pack(fill="x", padx=20, pady=10)
        
        self.info_label = ctk.CTkLabel(
            self.bottom_frame,
            text="üìö Telegram Book Converter Bot GUI Manager v1.0",
            font=ctk.CTkFont(size=10)
        )
        self.info_label.pack(side="left", padx=10, pady=5)
        
        self.theme_btn = ctk.CTkButton(
            self.bottom_frame,
            text="üåô –¢–µ–º–∞",
            command=self.toggle_theme,
            width=80
        )
        self.theme_btn.pack(side="right", padx=10, pady=5)
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env —Ñ–∞–π–ª–∞"""
        try:
            if self.config_file.exists():
                load_dotenv(self.config_file)
                bot_token = os.getenv("BOT_TOKEN", "")
                if bot_token:
                    self.token_entry.insert(0, bot_token)
                    self.log("‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                else:
                    self.log("‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            else:
                self.log("üìù –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π")
                self.config_file.touch()
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def save_token(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª"""
        token = self.token_entry.get().strip()
        if not token:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
            set_key(self.config_file, "BOT_TOKEN", token)
            set_key(self.config_file, "PRODUCTION", "0")
            set_key(self.config_file, "LOG_LEVEL", "INFO")
            
            self.log("‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω: {e}")
    
    def toggle_token_visibility(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞"""
        if self.token_entry.cget("show") == "*":
            self.token_entry.configure(show="")
            self.show_token_btn.configure(text="üôà –°–∫—Ä—ã—Ç—å")
        else:
            self.token_entry.configure(show="*")
            self.show_token_btn.configure(text="üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å")
    
    def test_token(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞"""
        if self._closing:
            return  # –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
            
        token = self.token_entry.get().strip()
        if not token:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
            return
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.test_token_btn.configure(state="disabled", text="‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞...")
        self.log("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞...")
        
        def check_token():
            if self._closing:
                return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
                
            try:
                response = requests.get(f"https://api.telegram.org/bot{token}/getMe", timeout=10)
                
                if self._closing:
                    return  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞
                
                result = response.json()
                
                if result.get("ok"):
                    bot_info = result.get("result", {})
                    bot_name = bot_info.get("username", "Unknown")
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ GUI –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                    if not self._closing:
                        self.root.after(0, lambda: self._on_token_valid(bot_name))
                else:
                    error = result.get("description", "Unknown error")
                    if not self._closing:
                        self.root.after(0, lambda: self._on_token_invalid(error))
            except Exception as e:
                if not self._closing:
                    self.root.after(0, lambda: self._on_token_error(str(e)))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=check_token, daemon=True).start()
    
    def _on_token_valid(self, bot_name):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)"""
        if self._closing:
            return  # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º GUI –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
            
        try:
            self.test_token_btn.configure(state="normal", text="üß™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω")
            self.log(f"‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω! –ë–æ—Ç: @{bot_name}")
            
            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
            def show_success_dialog():
                try:
                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω!\n–ë–æ—Ç: @{bot_name}")
                except Exception as e:
                    self.log(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞: {e}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
            self.root.after(100, show_success_dialog)
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: {e}")
    
    def _on_token_invalid(self, error):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)"""
        if self._closing:
            return
            
        try:
            self.test_token_btn.configure(state="normal", text="üß™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω")
            self.log(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: {error}")
            
            def show_error_dialog():
                try:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: {error}")
                except Exception as e:
                    self.log(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞: {e}")
            
            self.root.after(100, show_error_dialog)
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: {e}")
    
    def _on_token_error(self, error):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)"""
        if self._closing:
            return
            
        try:
            self.test_token_btn.configure(state="normal", text="üß™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω")
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {error}")
            
            def show_error_dialog():
                try:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {error}")
                except Exception as e:
                    self.log(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞: {e}")
            
            self.root.after(100, show_error_dialog)
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
    
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        if self.is_bot_running:
            self.log("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            return
        
        token = self.token_entry.get().strip()
        if not token:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω!")
            return
        
        try:
            self.log("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            self.bot_process = subprocess.Popen(
                [sys.executable, "bot.py"],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True,
                bufsize=1
            )
            
            self.is_bot_running = True
            self.update_status("–ó–∞–ø—É—â–µ–Ω", "üü¢")
            self.start_btn.configure(state="disabled")
            self.stop_btn.configure(state="normal")
            self.restart_btn.configure(state="normal")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤
            self.start_log_monitoring()
            
            self.log("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}")
    
    def stop_bot(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        if not self.is_bot_running or not self.bot_process:
            self.log("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
            return
        
        try:
            self.log("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            self.bot_process.terminate()
            self.bot_process.wait(timeout=10)
            
            self.is_bot_running = False
            self.bot_process = None
            
            self.update_status("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "üî¥")
            self.start_btn.configure(state="normal")
            self.stop_btn.configure(state="disabled")
            self.restart_btn.configure(state="disabled")
            
            self.log("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            
        except subprocess.TimeoutExpired:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            self.bot_process.kill()
            self.log("‚ö†Ô∏è –ë–æ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
    
    def restart_bot(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        self.log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        self.stop_bot()
        time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        self.start_bot()
    
    def start_log_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –±–æ—Ç–∞"""
        def monitor_logs():
            try:
                while self.is_bot_running and self.bot_process:
                    line = self.bot_process.stdout.readline()
                    if line:
                        self.log(line.strip())
                    elif self.bot_process.poll() is not None:
                        # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
                        self.log("‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
                        self.is_bot_running = False
                        self.root.after(0, lambda: self.update_status("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "üî¥"))
                        self.root.after(0, lambda: self.start_btn.configure(state="normal"))
                        self.root.after(0, lambda: self.stop_btn.configure(state="disabled"))
                        self.root.after(0, lambda: self.restart_btn.configure(state="disabled"))
                        break
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=monitor_logs, daemon=True).start()
    
    def update_status(self, status, indicator):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        self.status_label.configure(text=f"üìä –°—Ç–∞—Ç—É—Å: {status}")
        self.status_indicator.configure(text=indicator)
    
    def log(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥–∏"""
        timestamp = time.strftime("%H:%M:%S")
        log_message = f"[{timestamp}] {message}\n"
        
        self.logs_textbox.insert("end", log_message)
        
        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞
        if self.auto_scroll_var.get():
            self.logs_textbox.see("end")
    
    def clear_logs(self):
        """–û—á–∏—â–∞–µ—Ç –ª–æ–≥–∏"""
        self.logs_textbox.delete("1.0", "end")
        self.log("üóëÔ∏è –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
    
    def save_logs(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª"""
        try:
            filename = filedialog.asksaveasfilename(
                defaultextension=".log",
                filetypes=[("Log files", "*.log"), ("Text files", "*.txt"), ("All files", "*.*")]
            )
            if filename:
                logs_content = self.logs_textbox.get("1.0", "end")
                with open(filename, "w", encoding="utf-8") as f:
                    f.write(logs_content)
                self.log(f"üíæ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏: {e}")
    
    def toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"""
        current_mode = ctk.get_appearance_mode()
        if current_mode == "Dark":
            ctk.set_appearance_mode("light")
            self.theme_btn.configure(text="üåû –¢–µ–º–∞")
            self.log("üåû –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É")
        else:
            ctk.set_appearance_mode("dark")
            self.theme_btn.configure(text="üåô –¢–µ–º–∞")
            self.log("üåô –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ç–µ–º–Ω—É—é —Ç–µ–º—É")
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        if self.is_bot_running:
            if messagebox.askokcancel("–ó–∞–∫—Ä—ã—Ç–∏–µ", "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º?"):
                self.stop_bot()
                time.sleep(1)
                self.root.destroy()
        else:
            self.root.destroy()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç GUI"""
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        self.log("üéâ Telegram Book Converter Bot GUI Manager –∑–∞–ø—É—â–µ–Ω!")
        self.log("üí° –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω'")
        self.root.mainloop()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
        if not Path("bot.py").exists():
            messagebox.showerror(
                "–û—à–∏–±–∫–∞", 
                "–§–∞–π–ª bot.py –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ GUI –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –±–æ—Ç–æ–º."
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º GUI
        app = BotManagerGUI()
        app.run()
        
    except Exception as e:
        messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å GUI: {e}")

if __name__ == "__main__":
    main()
