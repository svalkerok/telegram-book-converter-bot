"""
üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å GUI
Safety and Stability Improvements for GUI
"""

import threading
import time
import subprocess
from typing import Callable, Any

try:
    import requests
except ImportError:
    requests = None

class SafeGUIExecutor:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–ª—è GUI –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    def __init__(self, root):
        self.root = root
        self._shutdown = False
        
    def safe_after(self, delay: int, callback: Callable, *args, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ after —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if self._shutdown:
            return
        
        def safe_callback():
            if not self._shutdown:
                try:
                    callback(*args, **kwargs)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ safe_after callback: {e}")
        
        try:
            self.root.after(delay, safe_callback)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ safe_after: {e}")
    
    def safe_thread(self, target: Callable, *args, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        def wrapped_target():
            try:
                target(*args, **kwargs)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ: {e}")
                if not self._shutdown:
                    self.safe_after(0, lambda: print(f"Thread error: {e}"))
        
        thread = threading.Thread(target=wrapped_target, daemon=True)
        thread.start()
        return thread
    
    def shutdown(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"""
        self._shutdown = True

class TokenValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    
    @staticmethod
    def validate_token_format(token: str) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞"""
        if not token:
            return False, "–¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        
        if len(token) < 35:
            return False, "–¢–æ–∫–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"
        
        if ":" not in token:
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞"
        
        parts = token.split(":")
        if len(parts) != 2:
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞"
        
        try:
            int(parts[0])  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å - —á–∏—Å–ª–æ
        except ValueError:
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞"
        
        return True, "–§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
    
    @staticmethod
    def validate_token_online(token: str, timeout: int = 10) -> tuple[bool, str, dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω –æ–Ω–ª–∞–π–Ω"""
        if requests is None:
            return False, "–ú–æ–¥—É–ª—å requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", {}
        
        try:
            response = requests.get(
                f"https://api.telegram.org/bot{token}/getMe", 
                timeout=timeout
            )
            result = response.json()
            
            if result.get("ok"):
                bot_info = result.get("result", {})
                bot_name = bot_info.get("username", "Unknown")
                return True, f"–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω! –ë–æ—Ç: @{bot_name}", bot_info
            else:
                error = result.get("description", "Unknown error")
                return False, f"–¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: {error}", {}
                
        except requests.exceptions.Timeout:
            return False, "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞", {}
        except requests.exceptions.ConnectionError:
            return False, "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", {}
        except requests.exceptions.RequestException as e:
            return False, f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}", {}
        except Exception as e:
            return False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", {}

class ProcessManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º"""
    
    def __init__(self):
        self.processes = {}
        self._shutdown = False
    
    def start_process(self, name: str, command: list, **kwargs) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º"""
        if self._shutdown:
            return False
        
        try:
            import subprocess
            process = subprocess.Popen(
                command,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True,
                **kwargs
            )
            self.processes[name] = process
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ {name}: {e}")
            return False
    
    def stop_process(self, name: str, timeout: int = 10) -> bool:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        if name not in self.processes:
            return True
        
        process = self.processes[name]
        try:
            process.terminate()
            process.wait(timeout=timeout)
        except subprocess.TimeoutExpired:
            process.kill()
            process.wait()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {name}: {e}")
            return False
        finally:
            del self.processes[name]
        
        return True
    
    def is_running(self, name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å"""
        if name not in self.processes:
            return False
        
        process = self.processes[name]
        return process.poll() is None
    
    def shutdown_all(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"""
        self._shutdown = True
        for name in list(self.processes.keys()):
            self.stop_process(name)

class GUILogger:
    """–õ–æ–≥–≥–µ—Ä –¥–ª—è GUI —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∏ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    
    def __init__(self, max_lines: int = 1000):
        self.max_lines = max_lines
        self.buffer = []
        self.callbacks = []
    
    def add_callback(self, callback: Callable[[str], None]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–±—ç–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –ª–æ–≥–æ–≤"""
        self.callbacks.append(callback)
    
    def log(self, message: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        timestamp = time.strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}"
        
        self.buffer.append(formatted_message)
        
        # –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤
        if len(self.buffer) > self.max_lines:
            self.buffer = self.buffer[-self.max_lines:]
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–ª–±—ç–∫–∏
        for callback in self.callbacks:
            try:
                callback(formatted_message)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ callback –ª–æ–≥–≥–µ—Ä–∞: {e}")
    
    def get_logs(self) -> list[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ª–æ–≥–∏"""
        return self.buffer.copy()
    
    def clear(self):
        """–û—á–∏—â–∞–µ—Ç –ª–æ–≥–∏"""
        self.buffer.clear()
        for callback in self.callbacks:
            try:
                callback("--- –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã ---")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ callback –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
